import functools
import colorama
import shutil
import re

alphabetica = {
     '':['',
         '',
         '',
         '',
         '',
         ''],
    'A':['    ___ ',
         '   /   |',
         '  / /| |',
         ' / ___ |',
         '/_/  |_|',
         '        '],
    'B':['    ____ ',
         '   / __ )',
         '  / __  |',
         ' / /_/ / ',
         '/_____/  ',
         '         '],
    'C':['   ______',
         '  / ____/',
         ' / /     ',
         '/ /__    ',
         '\____/   ',
         '         '],
    'D':['    ____ ',
         '   / __ \\',
         '  / / / /',
         ' / /_/ / ',
         '/_____/  ',
         '         '],
    'E':['    ______',
         '   / ____/',
         '  / __/   ',
         ' / /___   ',
         '/_____/   ',
         '          '],
    'F':['    ______',
         '   / ____/',
         '  / /_    ',
         ' / __/    ',
         '/_/       ',
         '          '],
    'G':['   ______',
         '  / ____/',
         ' / / __  ',
         '/ /_/ /  ',
         '\\____/   ',
         '         '],
    'H':['    __  __',
         '   / / / /',
         '  / /_/ / ',
         ' / __  /  ',
         '/_/ /_/   ',
         '          '],
    'I':['    ____',
         '   /  _/',
         '   / /  ',
         ' _/ /   ',
         '/___/   ',
         '        '],
    'J':['       __',
         '      / /',
         ' __  / / ',
         '/ /_/ /  ',
         '\\____/   ',
         '         '],
    'K':['    __ __',
         '   / //_/',
         '  / ,<   ',
         ' / /| |  ',
         '/_/ |_|  ',
         '         '],
    'L':['    __ ',
         '   / / ',
         '  / /  ',
         ' / /___',
         '/_____/',
         '       '],
    'M':['    __  ___',
         '   /  |/  /',
         '  / /|_/ / ',
         ' / /  / /  ',
         '/_/  /_/   ',
         '           '],
    'N':['    _   __',
         '   / | / /',
         '  /  |/ / ',
         ' / /|  /  ',
         '/_/ |_/   ',
         '          '],
    'O':['   ____ ',
         '  / __ \\',
         ' / / / /',
         '/ /_/ / ',
         '\\____/  ',
         '        '],
    'P':['    ____ ',
         '   / __ \\',
         '  / /_/ /',
         ' / ____/ ',
         '/_/      ',
         '         '],
    'Q':['   ____ ',
         '  / __ \\',
         ' / / / /',
         '/ /_/ / ',
         '\\___\\_\\ ',
         '        '],
    'R':['    ____ ',
         '   / __ \\',
         '  / /_/ /',
         ' / _, _/ ',
         '/_/ |_|  ',
         '         '],
    'S':['   _____',
         '  / ___/',
         '  \\__ \\ ',
         ' ___/ / ',
         '/____/  ',
         '        '],
    'T':['  ______',
         ' /_  __/',
         '  / /   ',
         ' / /    ',
         '/_/     ',
         '        '],
    'U':['   __  __',
         '  / / / /',
         ' / / / / ',
         '/ /_/ /  ',
         '\\____/   ',
         '         '],
    'V':[' _    __',
         '| |  / /',
         '| | / / ',
         '| |/ /  ',
         '|___/   ',
         '        '],
    'W':[' _       __',
         '| |     / /',
         '| | /| / / ',
         '| |/ |/ /  ',
         '|__/|__/   ',
         '           '],
    'X':['   _  __',
         '  | |/ /',
         '  |   / ',
         ' /   |  ',
         '/_/|_|  ',
         '        '],
    'Y':['__  __',
         '\\ \\/ /',
         ' \\  / ',
         ' / /  ',
         '/_/   ',
         '      '],
    'Z':[' _____',
         '/__  /',
         '  / / ',
         ' / /__',
         '/____/',
         '      '],
    'a':['        ',
         '  ____ _',
         ' / __ `/',
         '/ /_/ / ',
         '\\__,_/  ',
         '        '],
    'b':['    __  ',
         '   / /_ ',
         '  / __ \\',
         ' / /_/ /',
         '/_.___/ ',
         '        '],
    'c':['       ',
         '  _____',
         ' / ___/',
         '/ /__  ',
         '\\___/  ',
         '       '],
    'd':['       __',
         '  ____/ /',
         ' / __  / ',
         '/ /_/ /  ',
         '\\__,_/   ',
         '         '],
    'e':['      ',
         '  ___ ',
         ' / _ \\',
         '/  __/',
         '\\___/ ',
         '      '],
    'f':['    ____',
         '   / __/',
         '  / /_  ',
         ' / __/  ',
         '/_/     ',
         '        '],
    'g':['         ',
         '   ____  ',
         '  / __ `/',
         ' / /_/ / ',
         ' \\__, /  ',
         '/____/   '],
    'h':['    __  ',
         '   / /_ ',
         '  / __ \\',
         ' / / / /',
         '/_/ /_/ ',
         '        '],
    'i':['    _ ',
         '   (_)',
         '  / / ',
         ' / /  ',
         '/_/   ',
         '      '],
    'j':['       _ ',
         '      (_)',
         '     / / ',
         '    / /  ',
         ' __/ /   ',
         '/___/    '],
    'k':['    __  ',
         '   / /__',
         '  / //_/',
         ' / ,<   ',
         '/_/|_|  ',
         '        '],
    'l':['    __',
         '   / /',
         '  / / ',
         ' / /  ',
         '/_/   ',
         '      '],
    'm':['            ',
         '   ____ ___ ',
         '  / __ `__ \\',
         ' / / / / / /',
         '/_/ /_/ /_/ ',
         '            '],
    'n':['        ',
         '   ____ ',
         '  / __ \\',
         ' / / / /',
         '/_/ /_/ ',
         '        '],
    'o':['       ',
         '  ____ ',
         ' / __ \\',
         '/ /_/ /',
         '\\____/ ',
         '       '],
    'p':['         ',
         '    ____ ',
         '   / __ \\',
         '  / /_/ /',
         ' / .___/ ',
         '/_/      '],
    'q':['        ',
         '  ____ _',
         ' / __ `/',
         '/ /_/ / ',
         '\\__, /  ',
         '   /_/  '],
    'r':['        ',
         '   _____',
         '  / ___/',
         ' / /    ',
         '/_/     ',
         '        '],
    's':['        ',
         '   _____',
         '  / ___/',
         ' (__  ) ',
         '/____/  ',
         '        '],
    't':['   __ ',
         '  / /_',
         ' / __/',
         '/ /_  ',
         '\\__/  ',
         '      '],
    'u':['        ',
         '  __  __',
         ' / / / /',
         '/ /_/ / ',
         '\\__,_/  ',
         '        '],
    'v':['       ',
         ' _   __',
         '| | / /',
         '| |/ / ',
         '|___/  ',
         '       '],
    'w':['          ',
         ' _      __',
         '| | /| / /',
         '| |/ |/ / ',
         '|__/|__/  ',
         '          '],
    'x':['        ',
         '   _  __',
         '  | |/_/',
         ' _>  <  ',
         '/_/|_|  ',
         '        '],
    'y':['         ',
         '   __  __',
         '  / / / /',
         ' / /_/ / ',
         ' \\__, /  ',
         '/____/   '],
    'z':['     ',
         ' ____',
         '/_  /',
         ' / /_',
         '/___/',
         '     '],
    ' ':['        ',
         '        ',
         '        ',
         '        ',
         '        ',
         '        '],
}
src ="""
    ___       ____     ______   ____     ______   ______   ______   __  __   ____       __   __ __    __       __  ___   _   __   ____     ____     ____      ____     _____    ______   __  __   _    __   _       __   _  __    __  __   _____
   /   |     / __ )   / ____/  / __ \   / ____/  / ____/  / ____/  / / / /  /  _/      / /  / //_/   / /      /  |/  /  / | / /  / __ \   / __ \   / __ \    / __ \   / ___/   /_  __/  / / / /  | |  / /  | |     / /  | |/ /    \ \/ /  /__  /
  / /| |    / __  |  / /      / / / /  / __/    / /_     / / __   / /_/ /   / /   __  / /  / ,<     / /      / /|_/ /  /  |/ /  / / / /  / /_/ /  / / / /   / /_/ /   \__ \     / /    / / / /   | | / /   | | /| / /   |   /      \  /     / /
 / ___ |   / /_/ /  / /___   / /_/ /  / /___   / __/    / /_/ /  / __  /  _/ /   / /_/ /  / /| |   / /___   / /  / /  / /|  /  / /_/ /  / ____/  / /_/ /   / _, _/   ___/ /    / /    / /_/ /    | |/ /    | |/ |/ /   /   |       / /     / /__
/_/  |_|  /_____/   \____/  /_____/  /_____/  /_/       \____/  /_/ /_/  /___/   \____/  /_/ |_|  /_____/  /_/  /_/  /_/ |_/   \____/  /_/       \___\_\  /_/ |_|   /____/    /_/     \____/     |___/     |__/|__/   /_/|_|      /_/     /____/


   ___   ___      _____    __ __     ______   _____    _____   ____     ____
  <  /  |__ \    |__  /   / // /    / ____/  / ___/   /__  /  ( __ )   / __ \
  / /   __/ /     /_ <   / // /_   /___ \   / __ \      / /  / __  |  / /_/ /
 / /   / __/    ___/ /  /__  __/  ____/ /  / /_/ /     / /  / /_/ /   \__, /
/_/   /____/   /____/     /_/    /_____/   \____/     /_/   \____/   /____/


            __                   __           ____            __       _      _    __      __                                                                    __
  ____ _   / /_     _____   ____/ /  ___     / __/  ____ _   / /_     (_)    (_)  / /__   / /  ____ ___     ____     ____     ____     ____ _   _____   _____   / /_   __  __   _   __   _      __   _  __   __  __   ____
 / __ `/  / __ \   / ___/  / __  /  / _ \   / /_   / __ `/  / __ \   / /    / /  / //_/  / /  / __ `__ \   / __ \   / __ \   / __ \   / __ `/  / ___/  / ___/  / __/  / / / /  | | / /  | | /| / /  | |/_/  / / / /  /_  /
/ /_/ /  / /_/ /  / /__   / /_/ /  /  __/  / __/  / /_/ /  / / / /  / /    / /  / ,<    / /  / / / / / /  / / / /  / /_/ /  / /_/ /  / /_/ /  / /     (__  )  / /_   / /_/ /   | |/ /   | |/ |/ /  _>  <   / /_/ /    / /_
\__,_/  /_.___/   \___/   \__,_/   \___/  /_/     \__, /  /_/ /_/  /_/  __/ /  /_/|_|  /_/  /_/ /_/ /_/  /_/ /_/   \____/  / .___/   \__, /  /_/     /____/   \__/   \__,_/    |___/    |__/|__/  /_/|_|   \__, /    /___/
                                                 /____/                /___/                                              /_/          /_/                                                                /____/

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
1 2 3 4 5 6 7 8 9
a b c d e f g h i j k l m n o p q r s t u v w x y z
"""
def gen_dict_char():
    src ="""

 ____
/_  /
 / /_
/___/

    """
    letter="z"
    lines = src.split('\n')
    max = 0
    for i in range(len(lines)):
        if len(lines[i]) > max:
            max = len(lines[i])
        lines[i] = lines[i].replace('\\', '\\\\')
    print("    '" + letter + "':['" + lines[1] + ((max - len(lines[1])) * ' ') + "',")
    for line in lines[2:-2]:
        print("         '" + line + ((max - len(line)) * ' ') + "',")
    print("         '" + lines[-2] + ((max - len(lines[-2])) * ' ') + "'],")


def render(ascii):
    base = alphabetica[''][:]
    styles = [m for m in re.findall('\x1b' + r'\[..m', ascii)]
    for c in re.sub('\x1b' + r'\[..m', '$', ascii):
        if c == '$':
            style = styles.pop(0)
            base = [re.sub(r'(^|[^ ])(?=\s*$)', r'\1' + style, row) for row in base]
        else:
            base = cat(base, alphabetica[c][:])
    return base


def cat(first, second):
    overwritten = False
    merged = 0
    while '' not in first and '' not in second and not overwritten and merged < 3:
        merged += 1
        #print('\n'.join([f + s for f, s in zip(first,second)]).replace(' ', '.'))
        for i in range(6):
            overwritten = overwritten or (first[i][-1] != ' ' and second[i][0] != ' ')
            if first[i][-1] != ' ':
                second[i] = second[i][1:]
            else:
                first[i] = first[i][:-1]
    return [f + s for f, s in zip(first, second)]


class AsciiError(Exception):
    pass


class Ascii(str):

    def __new__(cls, source):
        return super(Ascii, cls).__new__(cls, source)

    def __str__(self):
        return '\n'.join('\n'.join(row for row in render(str.__str__(row))) for row in self.split('\n'))

    def __add__(self, other):
        return Ascii(str.__add__(self, other))

    def __mul__(self, other):
        return Ascii(str.__mul__(self, other))

    def style(self , mapping):
        base = render(self)
        for pattern, style in mapping.items():
            for c in pattern:
                for line in alphabetica[c]:
                    buffer = buffer.replace(line, style + line + colorama.Style.RESET_ALL)
        return buffer

    def __getattribute__(self, item):
        fn = str.__getattribute__(self, item)
        if not callable(fn) or fn.__name__ == '__str__':
            return fn

        def magic(*args, **kwargs):
            source = fn(*args, **kwargs)
            if isinstance(source, str):
                return Ascii(source)
            return source

        return functools.partial(magic)

    def center(self, width):
        while len(render(' ' + str.__str__(self) + ' ')[0]) < width:
            self = ' ' + str.__str__(self) + ' '
        return self


if __name__ == '__main__':
    #gen_dict_char()
    pyxam = Ascii(colorama.Fore.LIGHTBLUE_EX + '  py' + colorama.Fore.LIGHTYELLOW_EX + 'xam')
    width, _ = shutil.get_terminal_size((80, 20))
    print(pyxam.center(width))
    print('\n\n' + 'Latex Exam Generation. v0.3.2'.center(width, ' '))
    print(colorama.Style.RESET_ALL)